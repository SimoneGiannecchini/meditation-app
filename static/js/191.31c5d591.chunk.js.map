{"version":3,"file":"static/js/191.31c5d591.chunk.js","mappings":"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","sources":["components/Timer.jsx","components/QuoteBox.jsx","hooks/useAudioPlayer.js","assets/firebaseConfig.js","pages/Meditation.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst Timer = ({ onDurationChange, onSaveSession }) => {\r\n\r\n\r\n  const [duration, setDuration] = useState(5);\r\n  const [secondsLeft, setSecondsLeft] = useState(duration * 60);\r\n  const [isRunning, setIsRunning] = useState(false);\r\n\r\n  useEffect(() => {\r\n    onDurationChange(duration);\r\n    setSecondsLeft(duration * 60);\r\n  }, [duration]);\r\n\r\n  useEffect(() => {\r\n    let interval = null;\r\n    if (isRunning && secondsLeft > 0) {\r\n      interval = setInterval(() => {\r\n        setSecondsLeft(prev => prev - 1);\r\n      }, 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [isRunning, secondsLeft]);\r\n\r\n  const reset = () => {\r\n    setIsRunning(false);\r\n    setSecondsLeft(duration * 60);\r\n  };\r\n\r\n  return (\r\n    <div className=\"timer\">\r\n      <p>Selected Duration: {duration} Minutes</p>\r\n      <p>\r\n        Time Remaining: {Math.floor(secondsLeft / 60)}:\r\n        {(secondsLeft % 60).toString().padStart(2, '0')}\r\n      </p>\r\n\r\n      <div className=\"buttons\">\r\n        <button onClick={() => setDuration(prev => Math.max(1, prev - 1))}>-</button>\r\n        <button onClick={() => setDuration(prev => prev + 1)}>+</button>\r\n      </div>\r\n\r\n      <div className=\"controls\">\r\n  <button onClick={() => setIsRunning(true)}>Start</button>\r\n  <button onClick={() => setIsRunning(false)}>Pausa</button>\r\n  <button onClick={reset}>Reset</button>\r\n  <button onClick={onSaveSession}>Save Session</button>\r\n</div>\r\n\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import { useEffect, useState } from \"react\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport axios from \"axios\";\r\n\r\nconst QuoteBox = ({ onQuoteChange }) => {\r\n  const [quote, setQuote] = useState(\"Caricamento frase...\");\r\n  const [key, setKey] = useState(0);\r\n\r\n  const loadQuote = () => {\r\n    const proxyUrl = \"https://api.allorigins.win/get?url=\";\r\n    const targetUrl = \"https://zenquotes.io/api/random\";\r\n\r\n    axios\r\n      .get(proxyUrl + encodeURIComponent(targetUrl))\r\n      .then((res) => {\r\n        const parsed = JSON.parse(res.data.contents);\r\n        const frase = `${parsed[0].q} â€” ${parsed[0].a}`;\r\n        setQuote(frase);\r\n        setKey((prev) => prev + 1);\r\n        if (onQuoteChange) onQuoteChange(frase);\r\n      })\r\n      .catch(() => {\r\n        const fallback = \"Non riesco a caricare la frase. Respira comunque.\";\r\n        setQuote(fallback);\r\n        if (onQuoteChange) onQuoteChange(fallback);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    loadQuote();\r\n    const interval = setInterval(loadQuote, 30000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"quote-box\">\r\n      <AnimatePresence mode=\"wait\">\r\n        <motion.p\r\n          key={key}\r\n          className=\"quote\"\r\n          initial={{ opacity: 0, y: 10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          exit={{ opacity: 0, y: -10 }}\r\n          transition={{ duration: 1 }}\r\n        >\r\n          {quote}\r\n        </motion.p>\r\n      </AnimatePresence>\r\n\r\n      <p className=\"quote-source\">\r\n        Inspirational quotes provided by{\" \"}\r\n        <a\r\n          href=\"https://zenquotes.io/\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          ZenQuotes API\r\n        </a>\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuoteBox;\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nconst useAudioPlayer = (src, play) => {\r\n  const audioRef = useRef(new Audio(src));\r\n\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    audio.loop = true;\r\n    if (play) audio.play();\r\n    else audio.pause();\r\n\r\n    return () => audio.pause();\r\n  }, [play, src]);\r\n\r\n  return audioRef.current;\r\n};\r\n\r\nexport default useAudioPlayer;\r\n","// Import the functions you need from the SDKs you need\r\nimport { initializeApp } from \"firebase/app\";\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBnjuAgPRGuTqa-iSrIkQaSyslgp-ygqnc\",\r\n  authDomain: \"meditazione-2f938.firebaseapp.com\",\r\n  projectId: \"meditazione-2f938\",\r\n  storageBucket: \"meditazione-2f938.firebasestorage.app\",\r\n  messagingSenderId: \"390151791636\",\r\n  appId: \"1:390151791636:web:eca61605bab28a4c4d7301\"\r\n};\r\n\r\n// Initialize Firebase\r\nconst app = initializeApp(firebaseConfig);\r\nexport default app;","import React, { useState } from \"react\";\r\nimport Time from \"../components/Timer\";\r\nimport QuoteBox from \"../components/QuoteBox\";\r\nimport useAudioPlayer from \"../hooks/useAudioPlayer\";\r\nimport forestSound from \"../assets/forest.mp3\";\r\n\r\nimport app from \"../assets/firebaseConfig\";\r\nimport { getFirestore, collection, addDoc } from \"firebase/firestore\";\r\n\r\nimport \"../styles.scss\";\r\n\r\nconst Meditation = () => {\r\n  const [canPlay, setCanPlay] = useState(false);\r\n  const [quote, setQuote] = useState(\"\");\r\n  const [duration, setDuration] = useState(5);\r\n\r\n  const db = getFirestore(app);\r\n  useAudioPlayer(forestSound, canPlay);\r\n\r\n  const handleQuoteChange = (newQuote) => {\r\n    setQuote(newQuote);\r\n  };\r\n\r\n  const handleSaveSession = async () => {\r\n    try {\r\n      await addDoc(collection(db, \"meditationSessions\"), {\r\n        date: new Date(),\r\n        durationInMinutes: duration,\r\n        meditationType: \"forestSound\",\r\n        motivationalQuote: quote,\r\n      });\r\n      alert(\"Sessione salvata!\");\r\n    } catch (error) {\r\n      console.error(\"Errore durante il salvataggio:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"page-meditation\">\r\n      <h1>Meditation Space</h1>\r\n\r\n      {!canPlay && (\r\n        <button onClick={() => setCanPlay(true)} className=\"zen-button\">\r\n          Start Music\r\n        </button>\r\n      )}\r\n\r\n      <QuoteBox onQuoteChange={handleQuoteChange} />\r\n      <Time onDurationChange={setDuration} onSaveSession={handleSaveSession} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Meditation;\r\n"],"names":["_ref","onDurationChange","onSaveSession","duration","setDuration","useState","secondsLeft","setSecondsLeft","isRunning","setIsRunning","useEffect","interval","setInterval","prev","clearInterval","_jsxs","className","children","Math","floor","toString","padStart","_jsx","onClick","max","reset","onQuoteChange","quote","setQuote","key","setKey","loadQuote","axios","get","encodeURIComponent","then","res","parsed","JSON","parse","data","contents","frase","q","a","catch","fallback","AnimatePresence","mode","motion","p","initial","opacity","y","animate","exit","transition","href","target","rel","useAudioPlayer","src","play","audioRef","useRef","Audio","audio","current","loop","pause","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","Meditation","canPlay","setCanPlay","db","getFirestore","app","forestSound","QuoteBox","newQuote","Time","async","addDoc","collection","date","Date","durationInMinutes","meditationType","motivationalQuote","alert","error","console"],"sourceRoot":""}